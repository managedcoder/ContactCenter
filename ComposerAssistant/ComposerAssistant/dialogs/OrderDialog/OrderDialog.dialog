{
  "$kind": "Microsoft.AdaptiveDialog",
  "$designer": {
    "id": "yk9pCl",
    "name": "OrderDialogAdaptiveExpression",
    "comment": "This dialog shows how to use adaptive expressions to access and extract entities.  This is a case where adaptive expressions can get combersome so we've also included a custom action that simplifies things by dropping into C# to extract the entities.  You can use the following pizza order to exercises the full LUIS model and extraction logic: \"can i get a small margarita pizza please with bacon no onions and 2 large thin crust pizzas with half ham and the other half bacon and a coke and onion rings thanks\""
  },
  "autoEndDialog": true,
  "defaultResultProperty": "dialog.result",
  "triggers": [
    {
      "$kind": "Microsoft.OnBeginDialog",
      "$designer": {
        "name": "BeginDialog",
        "description": "",
        "id": "TGEpPo",
        "comment": "You can use the following pizza order to exercises the full LUIS model and extraction logic: \"can i get a small margarita pizza please with bacon no onions and 2 large thin crust pizzas with half ham and the other half bacon and a coke and onion rings thanks\""
      },
      "actions": [
        {
          "$kind": "Microsoft.SendActivity",
          "$designer": {
            "id": "tlIeq5"
          },
          "activity": "${SendActivity_tlIeq5()}"
        },
        {
          "$kind": "Microsoft.Foreach",
          "$designer": {
            "id": "01GsLz"
          },
          "index": "dialog.foreach.pizzaIndex",
          "value": "dialog.foreach.pizzaValue",
          "itemsProperty": "@order.FullPizzaWithModifiers",
          "actions": [
            {
              "$kind": "Microsoft.SetProperties",
              "$designer": {
                "id": "70MuY6"
              },
              "assignments": [
                {
                  "value": "${if(contains(dialog.foreach.pizzaValue, 'PizzaType'), dialog.foreach.pizzaValue.PizzaType[0], 'pizza')}",
                  "property": "dialog.pizzaType"
                },
                {
                  "property": "dialog.quantity",
                  "value": "${if(contains(dialog.foreach.pizzaValue, 'Quantity'), dialog.foreach.pizzaValue.Quantity[0], 1)}"
                },
                {
                  "property": "dialog.crust",
                  "value": "${if(contains(dialog.foreach.pizzaValue, 'Crust'), concat(dialog.foreach.pizzaValue.Crust[0][0], ' crust'), '')}"
                },
                {
                  "property": "dialog.size",
                  "value": "${if(contains(dialog.foreach.pizzaValue, 'Size'), dialog.foreach.pizzaValue.Size[0][0], '')}"
                }
              ]
            },
            {
              "$kind": "Microsoft.IfCondition",
              "$designer": {
                "id": "7ly9GB"
              },
              "actions": [
                {
                  "$kind": "Microsoft.Foreach",
                  "$designer": {
                    "id": "enTc7E"
                  },
                  "index": "dialog.foreach.toppingIndex",
                  "value": "dialog.foreach.toppingValue",
                  "itemsProperty": "dialog.foreach.pizzaValue.ToppingModifiers",
                  "actions": [
                    {
                      "$kind": "Microsoft.SetProperty",
                      "$designer": {
                        "id": "aCflYr"
                      },
                      "property": "dialog.modifier",
                      "value": "${if(and(contains(dialog.foreach.toppingValue, 'Modifier'), equals(dialog.foreach.toppingValue.Modifier[0][0], 'Remove')), ' no ', '')}"
                    },
                    {
                      "$kind": "Microsoft.SetProperty",
                      "$designer": {
                        "id": "v6Zj5x"
                      },
                      "property": "dialog.scope",
                      "value": "${if(contains(dialog.foreach.toppingValue, 'Scope'), dialog.foreach.toppingValue.Scope[0][0], '')}"
                    },
                    {
                      "$kind": "Microsoft.SetProperty",
                      "$designer": {
                        "id": "b2VBcM"
                      },
                      "property": "dialog.toppingsModifier",
                      "value": "${concat(dialog.modifier, dialog.scope, ' ',  dialog.foreach.toppingValue.Topping[0][0])}"
                    },
                    {
                      "$kind": "Microsoft.SetProperty",
                      "$designer": {
                        "id": "LrJEIY"
                      },
                      "property": "dialog.toppings",
                      "value": "=concat(dialog.toppings, if(greater(dialog.foreach.toppingIndex, 0), concat(' and ', dialog.toppingsModifier), dialog.toppingsModifier))"
                    },
                    {
                      "$kind": "Microsoft.SetProperties",
                      "$designer": {
                        "id": "cxdQQj"
                      },
                      "assignments": [
                        {
                          "property": "dialog.modifier",
                          "value": "=null"
                        },
                        {
                          "property": "dialog.scope",
                          "value": "=null"
                        },
                        {
                          "property": "dialog.toppingsModifier",
                          "value": "=null"
                        }
                      ]
                    }
                  ]
                }
              ],
              "condition": "=contains(dialog.foreach.pizzaValue, 'ToppingModifiers')"
            },
            {
              "$kind": "Microsoft.SendActivity",
              "$designer": {
                "id": "kSiv5C"
              },
              "activity": "${SendActivity_kSiv5C()}"
            },
            {
              "$kind": "Microsoft.SetProperty",
              "$designer": {
                "id": "CAWzSK"
              },
              "property": "dialog.toppings",
              "value": "=null"
            }
          ]
        },
        {
          "$kind": "Microsoft.IfCondition",
          "$designer": {
            "id": "U9hz02"
          },
          "condition": "=contains(@order, 'SideOrder')",
          "actions": [
            {
              "$kind": "Microsoft.Foreach",
              "$designer": {
                "id": "Am8XuZ"
              },
              "index": "dialog.foreach.index",
              "value": "dialog.foreach.value",
              "itemsProperty": "@order.SideOrder[0].SideProduct",
              "actions": [
                {
                  "$kind": "Microsoft.SetProperty",
                  "$designer": {
                    "id": "iz2oXt"
                  },
                  "property": "dialog.sideOrder",
                  "value": "=concat(dialog.sideOrder, if(greater(dialog.foreach.index, 0), concat(' and ', dialog.foreach.value), dialog.foreach.value))"
                }
              ]
            },
            {
              "$kind": "Microsoft.SendActivity",
              "$designer": {
                "id": "5HOlcw"
              },
              "activity": "${SendActivity_5HOlcw()}"
            }
          ],
          "elseActions": []
        }
      ]
    }
  ],
  "generator": "OrderDialog.lg",
  "recognizer": "OrderDialog.lu.qna",
  "id": "OrderDialog"
}
